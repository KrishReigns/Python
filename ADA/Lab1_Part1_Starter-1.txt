{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qU60HlV6lMGf"
   },
   "source": [
    "# MSCS3045 Fall 2022  \n",
    "# Lab 1 (part 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RPeaPkQolrcb"
   },
   "source": [
    "Rename your notebook (in the upper left) from Untitled.ipynb to Lab1MSCS3045_NN_Last_First where NN is your section#number, Last and First are you last and first names, respectively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-8W51jjsfzEn"
   },
   "source": [
    "Download the names.zip file from Canvas and unpack it.  Then set things up so you can read the files from this notebook.\n",
    "Then make sure the following three cells run correctly - you should see that the list has 2000 items in it.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "IMqPE1IaegU7"
   },
   "outputs": [],
   "source": [
    "import csv\n",
    "names = list()\n",
    "with open('names/yob1880.txt', newline='') as f:\n",
    "    reader = csv.reader(f)\n",
    "    for row in reader:\n",
    "        names.append(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "EAqu7rVjfY1_",
    "outputId": "1e696d48-1dc4-484c-ff5a-8f627f0a5cfb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2000"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "jf4nz3MsgVZq",
    "outputId": "9180e0cc-5803-4053-d319-3772c5de0f7c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Queen', '17'), ('Queenie', '11'), ('Quincy', '8')]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[(name, count) for (name, sex, count) in names if name[0] == \"Q\"]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "id": "mEZ-pkYxh0o-"
   },
   "source": [
    "Now build a single Python structure that contains the entire dataset (all 131 files!)  How you build this structure is up to you, but you might want to read ahead here to see what you need to do with it and think about how to make later steps easier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "L-KYE6GIiGnw"
   },
   "outputs": [],
   "source": [
    "# put some code here to do this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "w1VsgbgnidXn"
   },
   "source": [
    "Build a list of all the names that occur *anywhere* in the dataset (hint, maybe use the Python 'set' class for this - see McKinney, p. 65)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "pvTPikFpiwT7"
   },
   "outputs": [],
   "source": [
    "# put some code here to do this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XENrB5mSjIMh"
   },
   "source": [
    "Build a list of all the years as integers (1880 - 2010) Yes, this is trivial."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "vrx8CsLRjXzJ"
   },
   "outputs": [],
   "source": [
    "# put some code here to do this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6jvjPgt2jozM"
   },
   "source": [
    "Extend the dataset so that every year has the complete set of names, with 0 counts if the name wasn't originally in the file.  Now every year should have the identical set of names - you should write some code to check that this is true.  Yes, this is non-trivial :-)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "trg41W_0jxBT",
    "outputId": "14894957-bc43-4654-ab27-3968a4083b33"
   },
   "outputs": [],
   "source": [
    "# put some code here to do this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qFHNrHRjmGZv"
   },
   "source": [
    "Now build 3 Numpy arrays:  One array of strings with the names in alphabetical order, one with the years as integers in sorted order, and one 2d array with the counts of all the names for all the years.\n",
    "\n",
    "Double-check that you have done this correctly!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# put some code here to do this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sum your array along the year axis to get the total counts for each year (your result should have 131 entries)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# put some code here to do this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sum your array along the name axis to get the total counts for each name.  What name is most popular over all years?  Hint: argmax() is your friend here!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# put some code here to do this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please email your code to Karan, kmehta@clarku.edu to submit this lab before Sep. 13th 11:59 pm."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Lab0_starter.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}